eval("(function() {\n\nEmber.TEMPLATES[\"_date\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"<div class=\\\"answer-list hidden-item\\\">\\n    <span class=\\\"text-italic\\\">\\n        <span class=\\\"juicon juicon-info-circle\\\"></span>\\n        Applicants will be provided a date picker.\\n    </span>\\n</div>\");\n  \n});\n\nEmber.TEMPLATES[\"_paragraph\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"<div class=\\\"answer-list hidden-item\\\">\\n    <span class=\\\"text-italic\\\">\\n        <span class=\\\"juicon juicon-info-circle\\\"></span>\\n        Applicants will be provided a large text field.\\n    </span>\\n</div>\");\n  \n});\n\nEmber.TEMPLATES[\"_textField\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"<div class=\\\"answer-list hidden-item\\\">\\n    <span class=\\\"text-italic\\\">\\n        <span class=\\\"juicon juicon-info-circle\\\"></span>\\n        Applicants will be provided a text field.\\n    </span>\\n</div>\");\n  \n});\n\nEmber.TEMPLATES[\"components/datepicker\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '';\n\n\n  data.buffer.push(\"<div class=\\\"row input__group\\\">\\n    <div class=\\\"column--md--4\\\">\\n        <input type=\\\"text\\\" readonly=true/>\\n        \\n    </div>\\n    <div class=\\\"column--md--2\\\">\\n        <button type=\\\"button\\\" class=\\\"button button--secondary datepicker\\\" data-date-format=\\\"\\\" data-date=\\\"\\\">\\n            <span class=\\\"juicon juicon-calendar\\\"></span>\\n        </button>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"question\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n        <ul \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":answer-list :hidden-item question.isRadioButton:radio-list\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\">\\n            \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack2 = helpers.each.call(depth0, \"question.answers\", {hash:{\n    'itemController': (\"answer\")\n  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n        </ul>\\n    \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                <li>\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" \\n\\n                    <span \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":juicon scoreIcon :mar--sm--lm\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\"></span>\\n                </li>\\n            \");\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"question.questionPartial\", options) : helperMissing.call(depth0, \"partial\", \"question.questionPartial\", options))));\n  data.buffer.push(\"\\n    \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"pad--sm--n\\\">\\n    <div class=\\\"input__icon--special juicon juicon-right\\\"></div>\\n    <ul class=\\\"list-style-type-none inline-block input-size mar--sm--n text-right float--right\\\">\\n        <li class=\\\"inline-block downVote colorToggle\\\">\\n            <label class=\\\"input-size pad--sm--ls pad--sm--rs\\\">\\n                <input type=\\\"checkbox\\\">\\n                \\n            </label>\\n        </li>\\n    </ul>\\n    \\n    <div class=\\\"input-size pad--sm--m dots question-text\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"question.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n    </div>\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"question.answers\", {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"questionDetail\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"<nav id=\\\"jobOfferNav\\\" class=\\\"nav-bar--sf1 mar--sm--bn\\\">\\n    <button class=\\\"float--right-left button button--secondary mar--sm--only--ls show-brkpoint--sm--only\\\">Back</button>\\n    <h1 class=\\\"nav-bar--sf1__title has-subtitle page__heading\\\">Question Detail</h1>\\n</nav>\\n<hr class=\\\"show-brkpoint--md mar--sm--bn\\\"/>\\n<div class=\\\"content__section\\\">\\n    <div class=\\\"grid grid--vertical\\\">\\n        <p>\\n            {!tobase7__Form_Element__c.tobase7__Text__c}\\n        </p>\\n        <ul class=\\\"mar--sm--n\\\">\\n            <apex:repeat value=\\\"{!tobase7__Form_Element__c.tobase7__Answer_Choices__r}\\\" var=\\\"answer\\\">\\n                <li>{!answer.tobase7__Value__c}</li>\\n            </apex:repeat>\\n        </ul>\\n        <!--Select/Deselect Buttons-->\\n        <div class=\\\" first-on--small--only mar--md--txl\\\">\\n            <button type=\\\"button\\\" class=\\\"button button--primary width--full--sm--only\\\" id=\\\"selectQuestion\\\">Select Question</button>\\n            <button type=\\\"button\\\" class=\\\"button button--error button--ghost width--full--sm--only hide--i\\\" id=\\\"deselectQuestion\\\">Deselect Question</button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"snack-bar__container hide\\\">\\n    <div class=\\\"snack-bar\\\">\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"snack-bar__container\\\"></button>\\n        <div class=\\\"selectedQAlert hide--i\\\">\\n            <button type=\\\"button\\\" href=\\\"#\\\" class=\\\"button--snack text-primary undo\\\">Undo</button>\\n            <span>Question selected</span>\\n        </div>\\n        <div class=\\\"deselectedQAlert hide--i\\\">\\n            <button type=\\\"button\\\" href=\\\"#\\\" class=\\\"button--snack text-error undo\\\">Undo</button>\\n            <span>Question deselected</span>\\n        </div>\\n    </div>\\n</div>\");\n  \n});\n\nEmber.TEMPLATES[\"questionSelector\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes;\n  data.buffer.push(\"\\n            <ul class=\\\"list-group list-group--bordered\\\" id=\\\"selectedQs\\\">\\n                <div class=\\\"list-heading\\\">\\n                    <h4 class=\\\"list-heading__title has-radius-top\\\">\\n                        Selected Questions\\n                    </h4>\\n                </div>\\n                \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"question\", \"in\", \"selectedQuestions\", {hash:{\n    'itemController': (\"question\")\n  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                <div class=\\\"list-heading\\\">\\n                    <h4 class=\\\"list-heading__title\\\">\\n                        Options\\n                    </h4>\\n                </div>\\n                <label class=\\\"input-size pad--sm--ls pad--sm--rs float--right pad--sm--tm pad--sm--bm option-fix\\\">\\n                    <input type=\\\"checkbox\\\" name=\\\"chosen\\\" value=\\\"chosen\\\" checked=\\\"\\\">\\n                </label>\\n                <div class=\\\"input-size pad--sm--m dots question-text\\\">\\n                    Allow candidates to assert skills\\n                </div>\\n            </ul>\\n        \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"question\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                \");\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"hasQuestions\", {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes;\n  data.buffer.push(\"\\n                <ul class=\\\"list-group list-group--bordered\\\">\\n                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"position\", \"in\", \"positions\", {hash:{\n    'itemController': (\"position\")\n  },inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </ul> \\n            \");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"position.questions\", {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <div class=\\\"list-heading\\\">\\n                                <h4 class=\\\"list-heading__title\\\">\\n                                    Questions for a \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"position.Name\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                                </h4>\\n                            </div>\\n                            <div>\\n                                \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"question\", \"in\", \"position.questions\", {hash:{\n    'itemController': (\"question\")\n  },inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </div>\\n                        \");\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"question\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                                \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"scope-container\\\">\\n    <div id=\\\"mobileCardView\\\" style=\\\"display:none;\\\">\\n        <div class=\\\"table--fixed bg-1 relative has-radius related-item\\\">\\n            <div class=\\\"part__left--fixed card__feature--left\\\">\\n                <div class=\\\"avatar-container--md\\\">\\n                    <img src=\\\"https://dl.dropboxusercontent.com/u/234333568/questionSelectorProto/form-element.png\\\" alt=\\\"\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"part__body width--full pad--sm--rm pad--sm--tm\\\">\\n                <div class=\\\"dots\\\" style=\\\"color: #3c3d3e;\\\">Job Specific</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div id=\\\"mobileMainView\\\" class=\\\"content pad--md--tm pad--md--bl pad--sm--only--n\\\" style=\\\"display:none;\\\">\\n        <nav id=\\\"pageNav\\\" class=\\\"nav-bar--sf1 mar--sm--bn\\\">\\n            <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":float--right :button :button--primary :mar--sm--only--rs isLoading:load-this\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSave\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">Save</button>\\n            <h1 class=\\\"nav-bar--sf1__title has-subtitle page__heading has-subheading\\\">Job Specific Questions</h1>\\n            <h2 class=\\\"nav-bar--sf1__subtitle page__subheading\\\">Front End Developer</h2>\\n        </nav>\\n        <hr class=\\\"show-brkpoint--md\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"selectedQuestions\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"positions\", {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"questionSelector/index\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes;\n  data.buffer.push(\"\\n    <ul class=\\\"list-group list-group--bordered\\\" id=\\\"selectedQs\\\">\\n        <div class=\\\"list-heading\\\">\\n            <h4 class=\\\"list-heading__title has-radius-top\\\">\\n                Selected Questions\\n            </h4>\\n        </div>\\n        \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"question\", \"in\", \"selectedQuestions\", {hash:{\n    'itemController': (\"question\")\n  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    </ul>\\n\");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"question\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"hasQuestions\", {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes;\n  data.buffer.push(\"\\n        <ul class=\\\"list-group list-group--bordered\\\">\\n            \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"position\", \"in\", \"positions\", {hash:{\n    'itemController': (\"position\")\n  },inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        </ul> \\n    \");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"position.questions\", {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n            \");\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    <div class=\\\"list-heading\\\">\\n                        <h4 class=\\\"list-heading__title\\\">\\n                            Questions for a \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"position.Name\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        </h4>\\n                    </div>\\n                    <div>\\n                        \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"question\", \"in\", \"position.questions\", {hash:{\n    'itemController': (\"question\")\n  },inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                    </div>\\n                \");\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"question\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<nav id=\\\"jobOfferNav\\\" class=\\\"nav-bar--sf1 mar--sm--bn\\\">\\n    <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":float--right :button :button--primary :mar--sm--only--rs isLoading:load-this\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSave\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">Save</button>\\n    <h1 class=\\\"nav-bar--sf1__title has-subtitle page__heading has-subheading\\\">Job Specific Questions</h1>\\n    <h2 class=\\\"nav-bar--sf1__subtitle page__subheading\\\">Front End Developer</h2>\\n</nav>\\n<hr class=\\\"show-brkpoint--md\\\">\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"selectedQuestions\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n\\n<ul class=\\\"list-group list-group--bordered\\\" id=\\\"selectedQs\\\">\\n    <div class=\\\"list-heading\\\">\\n        <h4 class=\\\"list-heading__title has-radius-top\\\">\\n            Options\\n        </h4>\\n    </div>\\n    <li id=\\\"ember329\\\" class=\\\"ember-view list-group__item has-icon--right block\\\">\\n        <div class=\\\"input-size pad--sm--m dots\\\">\\n            <input type=\\\"checkbox\\\"/><label> Allow candidates to assert skills</label>\\n        </div>\\n    </li>\\n</ul>\\n\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"positions\", {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  return buffer;\n  \n});\n\n})();//@ sourceURL=app/templates.js")

eval("(function() {\n\n// Kick off Ember\nApp = Ember.Application.create({\n    rootElement: '#application'\n});\n\nApp.QuestionSelectorView = Ember.View.extend({\n    didInsertElement: function() {\n        Ember.run.scheduleOnce('afterRender', this, function() {\n            Ember.run.later(this, function() {   \n                console.log('gls');\n                //$('#mobileMainView').css('max-width', window.innerWidth + 'px');\n                if (window.innerHeight < 65) {\n                    $('#mobileCardView').show();\n                } else {\n                    $('#mobileMainView').show();\n\n                    if (navigator.userAgent.match(/iPhone/i)\n                        || navigator.userAgent.match(/iPad/i)\n                        || navigator.userAgent.match(/iPod/i)) {\n                        $('#mobileMainView').css({\n                                            'max-height' : window.innerHeight,\n                                            'overflow-y' : 'scroll',\n                                            '-webkit-overflow-scrolling' : 'touch'\n                                        });\n                    }\n                                        \n                }\n            }, 500);\n        });\n    }\n});\n\nApp.QuestionView = Ember.View.extend({\n    templateName: 'question',\n    classNames: 'list-group__item expandable-item has-icon--right table--fixed block dots'.w(),\n    classNameBindings: ['open'],\n    open: false,\n    tagName: 'li',\n    click: function(e) {\n        if (e.target.type !== 'checkbox') {\n            //this.get('controller').send('clickShowAnswers');\n            this.toggleProperty('open');\n            /*Ember.run.later(this, function() {\n                $('#' + this.get('elementId')).blur();\n            }, 500);*/\n        }\n    }\n});\n\nApp.QuestionSelectorController = Ember.ObjectController.extend({\n    finalSelectedQuestionIds: [],\n    finalDeselectedQuestionIds: [],\n    selectedQuestionIds: function() {\n        return this.get('selectedQuestions').getEach('Id');\n    }.property('positions'),\n    hasQuestions: function() {\n        var selectedQuestionIds = this.get('selectedQuestionIds');\n        var allPositionQuestionIds = [];\n\n        this.get('positions').getEach('Form_Elements__r').forEach(function(fe) {\n            if (!Ember.isNone(fe)) {\n                allPositionQuestionIds = allPositionQuestionIds.concat(fe.records.getEach('Id'));\n            }\n        });\n        \n        var questionsLeftToSelect = allPositionQuestionIds.reject(function(qId) {\n            return selectedQuestionIds.indexOf(qId) !== -1;\n        });\n\n        return questionsLeftToSelect.length > 0;\n    }.property('positions'),\n    actions: {\n        clickSave: function() {\n            this.set('isLoading', true);\n            var saveObj = {\n                finalSelectedQuestionIds: this.get('finalSelectedQuestionIds'),\n                finalDeselectedQuestionIds: this.get('finalDeselectedQuestionIds')\n            };\n\n            cont.saveFinalSelectionsForReq(JSON.stringify(saveObj), requisitionId, function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n\n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        self.set('error', parsedResult.errorMessages[0]);\n                        //reject(self);\n                    } else {\n                        sforce.one.back();\n                        console.log(parsedResult);\n                    }\n                } else {\n                    self.set('error', resObj.message);\n                    //reject(self);\n                }\n            });\n        }\n    }\n});\n\nApp.PositionController = Ember.ObjectController.extend({\n    questions: function() {\n        var selectedQuestionsSources = this.get('parentController').get('selectedQuestions').getEach('Source_Form_Element__c');\n        var selectedQuestionIds = this.get('parentController').get('selectedQuestionIds');\n\n        if (!Ember.isEmpty(this.get('Form_Elements__r'))) {\n            return this.get('Form_Elements__r').records.reject(function(fe) {\n                return selectedQuestionIds.indexOf(fe.Id) !== -1 || selectedQuestionsSources.indexOf(fe.Id) !== -1;\n            });\n        }\n    }.property('Form_Elements__r')\n});\n\nApp.QuestionController = Ember.ObjectController.extend({\n    needs: ['questionSelector'],\n    finalSelectedQuestionIdsBinding: 'controllers.questionSelector.finalSelectedQuestionIds',\n    finalDeselectedQuestionIdsBinding: 'controllers.questionSelector.finalDeselectedQuestionIds',\n    showAnswers: false,\n    answers: function() {\n        var answerChoices = this.get('Answer_Choices__r');\n        if (!Ember.isEmpty(answerChoices)) {\n            return answerChoices.records;\n        }\n    }.property('Answer_Choices__r'),\n    isRadioButton: Ember.computed.equal('Answer_Type__c', 'Radio Buttons'),\n    questionPartial: function() {\n        console.log(this.get('Answer_Type__c'));\n        return this.get('Answer_Type__c').camelize();\n    }.property('Answer_Type__c'),\n    questionSelectionDidChange: function() {\n        var questionId = this.get('Id');\n        var finalSelectedQuestionIds = this.get('finalSelectedQuestionIds');\n        var finalDeselectedQuestionIds = this.get('finalDeselectedQuestionIds');\n\n        if (this.get('isSelected') === true) {\n            finalSelectedQuestionIds.addObject(questionId);\n            finalDeselectedQuestionIds.removeObject(questionId)\n        } else if (this.get('isSelected') === false) {\n            finalSelectedQuestionIds.removeObject(questionId);\n            finalDeselectedQuestionIds.addObject(questionId);\n        }\n    /*    var self = this;\n        if (this.get('isSelected') === true) {\n            cont.selectQuestionForReq(this.get('Id'), requisitionId, function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n\n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        self.set('error', parsedResult.errorMessages[0]);\n                        //reject(self);\n                    } else {\n                        self.set('Id', parsedResult.data.newFe.Id);\n                        console.log(parsedResult);\n                    }\n                } else {\n                    self.set('error', resObj.message);\n                    //reject(self);\n                }\n            });\n        } else if (this.get('isSelected') === false) {\n            cont.removeQuestionFromReq(this.get('Id'), function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n\n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        self.set('error', parsedResult.errorMessages[0]);\n                        //reject(self);\n                    } else {\n                        console.log(parsedResult);\n                    }\n                } else {\n                    self.set('error', resObj.message);\n                    //reject(self);\n                }\n            });\n        }\n        /*cont.selectQuestionForRequisition(this.get('Id'), requisitionId, function(res, resObj) {\n            if (res) {\n                var parsedResult = parseResult(res);\n\n                if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                    self.set('error', parsedResult.errorMessages[0]);\n                    //reject(self);\n                } else {\n                    console.log(parsedResult);\n                }\n            } else {\n                self.set('error', resObj.message);\n                //reject(self);\n            }\n        });*/\n    }.observes('isSelected'),\n    actions: {\n        clickShowAnswers: function() {\n            this.toggleProperty('showAnswers');\n        }\n    }\n});\n\nApp.AnswerController = Ember.ObjectController.extend({\n    scoreIcon: function() {\n        var score = this.get('Score__c')\n            , disqualify = this.get('Disqualify__c')\n            , iconClass = '';\n\n        if (disqualify === true) {\n            iconClass = 'juicon-ban text-error';\n        } else if (score === 1) {\n            iconClass = 'juicon-like text-success';\n        } else if (score === -1) {\n            iconClass = 'juicon-dislike text-warning';\n        }\n\n        return iconClass;\n    }.property('Score__c', 'Disqualify__c')\n});\n\n// Routes\nApp.QuestionSelectorRoute = Ember.Route.extend( {\n    model: function(params) {\n        var returnObj = parsedQuestionSelectorMap;\n\n        returnObj.selectedQuestions.forEach(function(q) {\n            q.isSelected = true;\n        });\n\n        returnObj.positions.forEach(function(p) {\n            p.Form_Elements__r = {\n                records: returnObj.positionFormElements.filterBy('Source_Position__c', p.Id)\n            };\n        });\n        console.log(returnObj);\n        return returnObj;\n    }\n});\n\n// Router\nApp.Router.map(function() {\n    this.resource('questionSelector', { path: '/' });\n});\n\n\n// This setting disables the detail routing from showing up in the navbar.\nApp.Router.reopen( {\n    location: 'none'\n});\n\n})();//@ sourceURL=app/questionSelector.js")